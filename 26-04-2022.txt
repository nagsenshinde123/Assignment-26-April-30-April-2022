1) Intersection of two linked lists
     https://leetcode.com/problems/intersection-of-two-linked-lists/

     ublic class InterSectionOfLinkList
{
    public static Node push(Node head, int data)
    {
        Node node = new Node(data);
        node.data = data;
        node.next = head;
        return node;
    }

    public static Node findIntersection(Node first, Node second)
    {
        Set<Node> nodes = new HashSet<>();

        while (first != null)
        {
            nodes.add(first);
            first = first.next;
        }

        while (second != null)
        {
            if (nodes.contains(second)) {
                return second;
            }
            second = second.next;
        }

        return null;
    }

    public static void main(String[] args)
    {
        Node first = null;
        for (int i = 5; i > 0; i--) {
            first = push(first, i);
        }

        Node second = null;
        for (int i = 3; i > 0; i--) {
            second = push(second, i);
        }

        second.next.next.next = first.next.next.next;

        Node addr = findIntersection(first, second);
        if (addr != null) {
            System.out.println("The intersection point is " + addr.data);
        }
        else {
            System.out.println("The lists do not intersect.");
        }
    }
}

------------------------------------------------***------------------------------------------------------------

2. Find if the liked list is a Palindrome
https://www.geeksforgeeks.org/function-to-check-if-a-singly-linked-list-is-palindrome/

Ex -   
M->A->D->A->M
Output - True

Ex - S->T->A->R
Output - false"""

public class IsPalinDrome {
    public static void main(String args[])
    {
    	//M->A->D->A->M
        NodeS one = new NodeS("S");
        NodeS two = new NodeS("T");
        NodeS three = new NodeS("A");
        NodeS four = new NodeS("R");
        //NodeS five = new NodeS("M");

        one.ptr = two;
        two.ptr = three;
        three.ptr = four;
       // four.ptr = five;

        boolean condition = isPalindrome(one);
        System.out.println("isPalidrome :" + condition);
    }
    static boolean isPalindrome(NodeS one)
    {

        NodeS slow = one;
        boolean ispalin = true;
        Stack<String> stack = new Stack();

        while (slow != null) {
            stack.push(slow.data);
            slow = slow.ptr;
        }

        while (one != null) {

            String i = stack.pop();
            if (one.data == i) {
                ispalin = true;
            }
            else {
                ispalin = false;
                break;
            }
            one = one.ptr;
        }
        return ispalin;
    }
}
---------------------------------------------------------------------------------------------------------------------

